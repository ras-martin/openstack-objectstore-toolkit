name: Docker Build
on:
  push:
    branches: [ ]
    tags:
      - v*
  pull_request:
    types: [ opened, synchronize ]
    branches: [ master ]

  workflow_dispatch:

jobs:
  docker-build:
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: "${REGISTRY}/${{ github.repository_owner }}/openstack-objectstore-toolkit"
    timeout-minutes: 90

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v2

      - name: Login to Registry
        id: docker-login
        if: success()
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY}}
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Prepare
        id: prepare
        run: |
          VERSION=edge

          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF_NAME}
          fi

          if [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=${GITHUB_REF_NAME}__${GITHUB_RUN_NUMBER}
          fi

          if [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=PR_${{ github.event.pull_request.number }}__${GITHUB_RUN_NUMBER}
          fi

          echo ::set-output name=docker_image::${IMAGE_NAME}
          echo ::set-output name=version::${VERSION}

      - name: Run Docker Build for Tag
        id: docker-build
        if: steps.prepare.outputs.version == v*
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm/v7,linux/arm64 \
            --tag ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }} \
            --tag ${{ steps.prepare.outputs.docker_image }}:latest \
            --output "type=image,push=true" \
            --file ./Dockerfile .

      - name: Run Docker Build
        id: docker-build
        if: steps.prepare.outputs.version != v*
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm/v7,linux/arm64 \
            --tag ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }} \
            --output "type=image,push=true" \
            --file ./Dockerfile .